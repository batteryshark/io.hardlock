<HTML>
<HEAD>

	<META NAME="VPSiteProject" CONTENT="file:///C|/Documents%20and%20Settings/Administrator/My%20Documents/My%20Webs/fravia/Project.vpp"><TITLE>fp_dong1.htm : Dongle Bashing ~ End of the dongle old aera ~ first part</TITLE>
</HEAD>
<BODY BGCOLOR=#C0C0C0 TEXT=#001010 VLINK=#405040>
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" HEIGHT="22"  WIDTH= "100%">
<TR><td></td>
<td>
<center><FONT SIZE="+2">Dongle Bashing</fonT><br>
        <FONT SIZE="+1">End of the dongle old aera ~ Dongles bye bye</fonT><br>(re-uploade version October 1998)<bR>
<br><a href="#firstpart">first part</a> ~ <a href="fp_dong2.htm" tppabs="http://www.woodmann.com/fp_dong2.htm">second part</a><bR>
"How a single +HCU reverser can easily blow a whole commercial sector out 
of history"

</center>
</td>
<td>
<center><a href="advanced.htm" tppabs="http://www.woodmann.com/advanced.htm"><IMG SRC="xtranio.gif" tppabs="http://www.woodmann.com/images/xtranio.gif" ALT="advanced" 
ALIGN=CENTER WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 
HSPACE=0></a>
<br>
<font color=gray>Advanced</FonT>
</center></td></tr>
<tR>
<td bgcolor="#FFFFEA"><center>
<FONT COLOR="890000">
29 January 1998
</FONT></center>
</td>
<td bgcolor="#FFFFEA"><center>
by 
<font size=+3>
Frog's print
</fonT></center>
</td>
<td VALIGN="center" bgcolor="#FFFFEA">
<a href="hcu98_3.htm" tppabs="http://www.woodmann.com/hcu98_3.htm"><IMG SRC="hcu1.gif" tppabs="http://www.woodmann.com/images/hcu1.gif" ALT="+cracker" ALIGN=BOTTOM 
WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a></td>
</tr>
<TR><td><center><a href="index-1.htm" tppabs="http://www.woodmann.com/index.htm">
<IMG SRC="bulletr.gif" tppabs="http://www.woodmann.com/images/bulletr.gif" ALIGN="BOTTOM" 
BORDER="0"
VSPACE="0" HSPACE="0" width="13" height="13"></a></center></td>
<TD BGCOLOR="898030"><center>Courtesy of Reverser's page of 
reverse engineering</center> 
</center></TD>
<td BGCOLOR="898030">
<center>
<prE> </prE></center></td>
</TR>
<tr><td></td><td><i><center>
Oh my... the dongle old aera is finished. Out.<bR>
That's it, nothing more to add...  let's hope we get a new dongle aera to work on.<br>
Awesome essay. Frog's Print's incredible work should be printed (44 pages !) 
and sipped slowly, it's 
'cracking for conoisseurs'... reverser's vintage 1998 "grand reserve"!<br>Bye bye to all 
those that wanted to do some quick bucks selling hardware protections that 
were NOT protections at all. This is good, nobody will mourn the disappearing of 
smoke-sellers and bogus protectors.  Bye bye to all those that never 
cared to study assembly. This is good.  
Bye bye to all the creations of the poor programmers that 
blindly trusted commercial (and THEREFORE bogus) dongle 
protections to defend their valuable software instead of writing 
their own much more solide protections. Tsch Tsch.<br>
You had better read +ORC's students essays first... next time. 
And learn. And now don't come to the silly idea to blame Frog's Print...  
blame those dilettantes that have sold you smoke. Blame yourself. A little 
<a href="realicra.htm" tppabs="http://www.woodmann.com/realicra.htm">reality cracking</a> would have done you 
some good, probably. Well, one never ends learning, does one? I would 
never have believed myself that (almost) all implementations of the 
dongle protections scheme were so 
stupid. Oh my, how low, how deep have the programmers fallen, since Micro$oft introduced its 
frilly-dizzy rattamazz operating system :-)<bR>Of course anyone of my readers 
could now just 'go shopping' and download, fetch or get hundred thousand 
dongle protected software programs, each one of them -incidentally- 
extremely expensive. DO NOT DO IT. You'll only stuff your already exploding harddisks to 
death for <u>nothing</u> and bore yourself to death.<br> See, you don't 
need to do it: that poor   
software won't disappear, nor it will go away. It will always be there. It wont 
be dongle protected any more after this, oh no, no, no :-)<bR> Yet, probably 
it will be as poorly 
protected as before by some other charlatans, smoke-selling some other 'infallible' protection 
scheme... people never learn. Unless they study. That's why you are here, my good reader, 
to master a difficult but POWERFUL art: reversing.<bR>
So don't steal the software that Frog's Print has now stripped naked. Look at those 
protection schemes, pathetically whining and sobbing under Frog's streng and mighty 
reversing blick. They wont be ever able to run away, the poor scared things.<bR> 
Of course -as it happens- this essay could be useful AGAINST THEFT.. for our 
underfunded public universities for instance, where 
(as I very well know) hardware dongles are regularly and phisycally stolen from their 
parallel ports (it's difficult to find a way to fest them there and students don't 
show any respect for public property any more, having being corrupted by the 'sacrality' of 
private gains and property)... so this 
essay may be a good reading, for all colleagues in the public sector, in order to protect 
against stupid vandalic theft their legally bought software 
as well :-)<bR>See: +crackers bring solutions for the good ones and ruin for the evil ones :-)
</i></center></td>
<td><center>
Also in:<br><bR>
<a href="project3.htm" tppabs="http://www.woodmann.com/project3.htm"><IMG SRC="project3.gif" tppabs="http://www.woodmann.com/images/project3.gif" ALT="+dongles" ALIGN=BOTTOM 
WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a><br>
<font color=gray>Dongles</fonT><br><br>


<a href="progcor.htm" tppabs="http://www.woodmann.com/progcor.htm"><IMG SRC="useful.gif" tppabs="http://www.woodmann.com/images/useful.gif" ALT="+progcor" ALIGN=BOTTOM 
WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a><bR>
<font color=gray>Programmers<bR>Corner</fonT><br><br>

</center>
</td>
</tr>
<TR><td></td>
<TD BGCOLOR="898030"><center></i><b>There is a crack, a crack in everything 
That's how the light gets in</b></center>
</center></TD><td></td>
</TR>
<TR>
<td VALIGN= "MIDDLE" bgcolor="#C6E7C6"><font color=blue><center>
Rating</FONT></FONT></center>
</TD>
<td VALIGN = "MIDDLE" bgcolor="#C6E7C6"><font color=blue><center>
<!-- CHOOSE A RATING (may be changed) -->
(x)<B>Beginner</B> (x)<B>Intermediate</B> (x)<B>Advanced</B> ( )<B>Expert</B></FONT>
</center></td>
<td></td>
</tr>
</table>
<!-- CORPUS  -->
<bR>
<a name="firstpart"></a>
<I>This essay covers 14 dongle
protected softs: they <FONT COLOR="#000000">ALL can be FREELY DOWNLOADED
from their respective companies home pages / sites (see links below).</FONT></I>
<center><hr size=1>
   <FONT SIZE="+2">
<!-- CHOOSE A TITLE (wont proabbly be changed) -->
Dongle Bashing
   </FONT><BR>
   <FONT SIZE="+2">
<!-- CHOOSE A SUBTITLE (wont proabbly be changed) -->
End of the dongle old aera ~ Dongles bye bye
   </FONT><BR>

<FONT SIZE="+1">"How a single +HCU reverser can easily blow a whole commercial sector out 
of history"</fonT><br><bR>
   <FONT COLOR="0B7FC1">
<!-- REPEAT YOUR CHOSEN HANDLE HERE -->
Written by Frog's Print
   </FONT>
</center>
<!-- INTRODUCTION STARTS HERE -->
<br><br>
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" HEIGHT="45"  WIDTH= "100%">
<tr><td bgcolor="#C6E7C6"><center><font size=+2><font color=blue>Introduction</fonT></fonT></center><bR>
</td></tr></table>


<TT>Due to the huge Dongle/Security advertisement
campaign overrunning the Net those days (may be the biggest ever), mostly
from Aladdin (Hasp) and Rainbow Technologies (Sentinel), I decided to start
a first approach on this kind of protection.</TT>&nbsp;
<BR><TT>For this, I needed Dongle programs.&nbsp;</TT>&nbsp;
<BR><TT>-Q: Where the hell could we find Dongle protected softs??&nbsp;</TT>&nbsp;
<BR><TT>-A: On the Net!</TT>&nbsp;
<BR><TT>Yes, on the Net and for FREE. It's just like sharewares: you download
them, sometimes as the fully working update/new version or as a demo you
can test, and, if you send money to the author, you get a dongle instead
of a password.</TT>&nbsp;
<BR><TT>I fetched 14 of them, all different kind :</TT>&nbsp;
<BR><TT>From Hasp, Sentinel, DesKEY, Activator/Unikey to 'home-made' dongles,
simple or not, cheap or very expensive softs, small or overbloated, useless
or useful, running under Windows 32bit, 16bit or DOS, cracked them using
Live approach, Dead Listing or Zen cracking : every one to his taste!&nbsp;</TT>&nbsp;
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TT>&nbsp;
<BR><TT>After that, I can already give you my conclusion:&nbsp;</TT>&nbsp;
<BR><TT>What a disappointment! Only one soft out of 14 had an interesting
protection (<A HREF="#Micro Cap">MicroCap V</A>). So, dongles appear to
be a good "ready_to_use" protection but <B><U>they are NOT</U></B>. They
are as much complicated to program as they are to crack (sometimes even
more). If you are a programmer and want to use a dongle to protect your
soft, you must understand that you need to have real strong knowledge about
protection and programming. Otherwise just forget it (and you'll save money).&nbsp;</TT>&nbsp;
<BR>&nbsp;

<P><!-- PASTE HERE YOUR INTRODUCTION --><TT>So, Dongles could be a very
powerful and strong way to protect a soft...as long as the programmer willing
to utilize one knows how to use it. Unfortunately, most of them don't (note
that we are not talking about shareware programmers but professional guys!
) and are still using our "beloved" <I>Test eax,eax//jnz Bad_Guy</I> stupid
routine, thinking that they don't have to worry about the protection because
the dongle will take care of it (same old problem discussed so much often
here -: ). Some of them use ridiculous $5 shareware tricks to protect $4.000
professional softs (see <A HREF="#Vision">Vision XXL</A>) and, worse, others
just forgot to read the Dongle documentation manual shipped with their
hardware key (see <A HREF="#ABBCS31">ABBCS31</A>), you'll even find some
of the most amazingly stupid protections I can't find any words to describe
them (see <A HREF="#read_and_forget">DigiSHOW</A>). Too bad...specially
when those programs are available for free download on the Net.&nbsp;</TT>&nbsp;

<P><TT>Sometimes it may be useful to know which dongle is needed for the
program you want to crack (Aladdin's Hasp, Rainbow Technologies' Sentinel,
Dinkey, Everlock...) or, <B>very important</B> if you plan to use SoftICE
and some Breakpoints, the type of dongle (parallel or serial key, internal
or PCMCIA card, Network dongle...), sometimes you won't even have to care
about that. And, finally, in just few cases, you may not be able to crack
a program if you don't have the right dongle (but if you have the dongle
why should you crack it? -: ) or because the program is strongly encrypted
and/or uses too many anti-debugger and anti-w32dasm/IDAPro protections
(usually, those anti-crackers protections are not written by the programer
himself :- ).&nbsp;</TT>&nbsp;
<BR><TT>For this, never forget to read carefully the program's doc or HLP
files, to visit it's company home page (specially the "installation help"
or "FAQ" pages) to collect the maximum infos about the dongle needed. You'll
find them most of the time, but sometimes you may only find that the program
needs a "green" or "red" dongle. So don't forget to monitor the program
installation on your Hard Drive : for all the programs of this essay, during
their installation I used CleanSweep, WinDelete and TechFacts, all 3 programs
running at the same time. Then check for new .Vxd, .Drv, .Sys and .Dll
files in you windows(/system) or the programs directories. Do the same
the first time you'll run the program because it may use/create and hide
a lot of "~x34_m-!.sys" or similar strange named files anywhere on your
HD. If you can identify the Dongle manufacturer, then visit its WWW/FTP
sites, newsgroups, read newspaper articles about it and visit programmers'
tools retailers companies sites like <A HREF="javascript:if(confirm('http://www.sosdevelopers.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sosdevelopers.com/'" tppabs="http://www.sosdevelopers.com/">SOSdevelopers</A>
(if you can understand French), download their softs/demos (SOSdevelopers
<A HREF="javascript:if(confirm('http://www.sosdevelopers.com/scripts/ListeDemo.asp  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sosdevelopers.com/scripts/ListeDemo.asp'" tppabs="http://www.sosdevelopers.com/scripts/ListeDemo.asp">download section</A>),
get their free catalogue where you'll find all products for programers
and the latest protections tools of the market (BTW, SOSdevelopers is probably
actually one of the rare place where you can still find SoftICE 3.01 and
all others Numega 14 days trial version products available for downloading
since Numaga lately removed their Download section from their WWW home
site -: ). And finally, if you plan to crack several dongle protected softs,
install and monitor the first one, crack it and then <B>delete</B> it before
installing the second one, third one... otherwise it'll be to messy and
complicated to monitor and crack.&nbsp;</TT>&nbsp;
<BR>&nbsp;

<P><TT>Here is now, for instance, some infos I found at <A HREF="javascript:if(confirm('http://www.aks.com/hasp  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.aks.com/hasp'" tppabs="http://www.aks.com/hasp">Aladdin
SoftWares</A> (Hasp/NetHasp dongles). They wrote this to help programers
to write a "good" protection for their dongle (blue comments are mine of
course!):</TT>&nbsp;
<BR>
<HR SIZE=1 WIDTH="100%">
<BR><I><TT><FONT SIZE=+0>Tips and Tricks for Maximum Protection (from Aladdin
SoftWares)</FONT>&nbsp;</TT></I>&nbsp;

<P><I><TT>The golden rule of HASP-based software protection is that the
protection system is only as secure as the routines that call the key and
decide whether to allow execution of the protected program. In other words,&nbsp;</TT>&nbsp;</I>&nbsp;
<BR><I><TT>since the hardware of HASP keys is too complicated to break
or duplicate, <U>hackers will usually try to trace the protection code
and eliminate the protection routines</U>.&nbsp;</TT>&nbsp;</I>&nbsp;
<BR><TT><FONT COLOR="#3333FF">Emulating the Dongle by re-writing its main
routine is much funnier than boring tracing and patching (and sometimes
a lot easier, specially the Hasp protection routine! )</FONT></TT><I>&nbsp;</I>&nbsp;
<BR><I><TT>While we supply you with the best hardware and software protection
tools available, and while the HASP Envelope can by itself provide an excellent
protection for application programs, if possible, <U>you should enhance
your protection system by implementing the Application Programming Interface
(API) as well</U>.&nbsp;</TT>&nbsp;</I>&nbsp;
<BR><TT><FONT COLOR="#3333FF">If only they knew how to do it...</FONT></TT><I>&nbsp;</I>&nbsp;

<P><I><TT>Please keep in mind that while no single technique can defeat
every hacker, the more traps and safeguards you use, the more difficult
it will be to break your software. In order to achieve maximum protection
with HASP, we suggest you implement at least some of the procedures outlined
below:&nbsp;</TT>&nbsp;</I>&nbsp;
<BR><I><TT><B>Issue as many calls as possible with many different Seed
Codes.</B>&nbsp;</TT>&nbsp;</I>&nbsp;
<BR><I><TT>The more calls and expected responses you use, <U>the more difficult
it will be to trace and remove them</U>.&nbsp;</TT>&nbsp;</I>&nbsp;
<BR><TT><FONT COLOR="#3333FF">Boring yes, difficult not really.</FONT></TT><I>&nbsp;</I>&nbsp;

<P><I><TT><B>Perform logical divisions of the checking procedure.</B> Divide
the checking procedure, and if possible, spread it across your program
at far-away points.&nbsp;</TT>&nbsp;</I>&nbsp;
<BR><I><TT>A logical division would be: calling, checking, and reacting
routines, each <U>situated in a different section of the program</U>.&nbsp;</TT>&nbsp;</I>&nbsp;
<BR><I><TT><B>Hide parts of the checking code within a regular source code.</B>
For example, the calling routine can be <U>hidden within a general initialization
routine</U>.&nbsp;</TT>&nbsp;</I>&nbsp;
<BR><TT><FONT COLOR="#3333FF">Easy to find with a BPIO 278/378</FONT></TT><I>&nbsp;</I>&nbsp;

<P><I><TT><B>Use complicated mathematical expressions.</B> In order to
confuse hackers, check for the Return Codes <U>using complicated mathematical
expressions</U>. For example, if you are expecting a Return Code which
equals 26387, incorporate an expression such as the one below to perform
the check:&nbsp;</TT>&nbsp;</I>&nbsp;
<BR><I><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If (ReturnCode1 -
7)/4 = (ExpectedReturnCode1 - 6602)/3&nbsp; then...</TT>&nbsp;</I>&nbsp;
<BR><I><TT>To further enhance your level of security, follow the same procedure
throughout your software for any mathematical constants used in implementing
your HASP software protection solution.&nbsp;</TT>&nbsp;</I>&nbsp;
<BR><TT><FONT COLOR="#3333FF">Yes, and add a beautiful jnz_Bad_Guy at the
end...</FONT><I>&nbsp;</I></TT><I>&nbsp;</I>&nbsp;

<P><I><TT><B>Use delayed reactions.</B> Do not react immediately to a checking
call. For example,do not test for a certain value and then issue an error
message if you do not like the result. If you do, the hacker will easily
understand what you are doing.&nbsp;</TT>&nbsp;</I>&nbsp;
<BR><I><TT>It is better to store the value in a variable A, check A's value
a few subroutine calls later, and set a new variable B to say whether or
not you like it. Several calls after that, test the value of B, and only
then issue the error message.&nbsp;</TT>&nbsp;</I>&nbsp;
<BR><I><TT>Force hackers to work backward to figure out how B got a certain
value and why the program fails because of that. The relation to the original
returned value should no longer be obvious.&nbsp;</TT>&nbsp;</I>&nbsp;
<BR><TT><FONT COLOR="#3333FF">See above</FONT></TT><I>&nbsp;</I>&nbsp;

<P><I><TT><B>Perform check-sums.</B> Perform a check-sum on the program
to find out if it has been&nbsp;</TT>&nbsp;</I>&nbsp;
<BR><I><TT>tampered with. The most effective means to do this is with the
HASP Pro Kit.&nbsp;</TT>&nbsp;</I>&nbsp;
<BR><I><TT>Otherwise, the simplest way to do so is to use the following
pattern:&nbsp;</TT>&nbsp;</I>&nbsp;
<BR><I><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Calculate check-sum.</TT>&nbsp;</I>&nbsp;
<BR><I><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Compare with correct
value.</TT>&nbsp;</I>&nbsp;
<BR><I><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If the two do not
match,</TT>&nbsp;</I>&nbsp;
<BR><I><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
issue an error message;</TT>&nbsp;</I>&nbsp;
<BR><I><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
otherwise, continue.</TT>&nbsp;</I>&nbsp;
<BR><I><TT>Unfortunately, this technique is vulnerable to several attacks.</TT></I>&nbsp;
<BR><TT><FONT COLOR="#3333FF">Bad luck!</FONT><I>&nbsp;</I>&nbsp;</TT>&nbsp;
<BR><TT>etc,etc...&nbsp;</TT>&nbsp;
<BR>
<HR SIZE=1 WIDTH="100%">
<BR><TT>To crack a dongle, you must first locate the protection you'll
have to crack. Any means are good:</TT>&nbsp;
<BR><TT>-searching in the program or its DLLs the main dongle routine (I
wrote my own <I>haspfind.com</I>&nbsp; that search a directory for the
file where the Hasp routine is located).</TT>&nbsp;
<BR><TT>-Bpio with softICE. It will always work (as long as you don't forget
to install the driver and, most of the time, reboot to load it) but you
may easily get stuck/lost deep inside complex routines.</TT>&nbsp;
<BR><TT>-Since most programs will issue an error message ("Dongle not found"...)
you may just have to BPX the MessageBoxA functions or all other similar
ones and find the cross-references.</TT>&nbsp;
<BR><TT>-Disassembling the file to find some "Check_If_Dongle_OK" exported
functions.</TT>&nbsp;

<P><TT>After that, there are different ways to crack it:&nbsp;</TT>&nbsp;
<BR><TT>1/Reverse engineering the dongle protection main routine in order
to emulate the dongle (see <A HREF="#ABBCS31">ABBCS31</A>).&nbsp;</TT>&nbsp;
<BR><TT>-This is very efficient specially if this routine is called dozens
or sometimes hundreds of times throughout the program (otherwise we would
have to patch all those cross-references!).&nbsp;&nbsp;</TT>&nbsp;
<BR><TT>-With this method, you don't need to have the dongle driver loaded
(if you have 10 programs using different dongles, you'll need to have 10
different drivers always loaded).&nbsp;</TT>&nbsp;
<BR><TT>2/Patching some <I>Call</I>, <I>Test</I> or <I>jnz</I> instructions.&nbsp;&nbsp;</TT>&nbsp;
<BR><TT>Not the most elegant method but useful if:&nbsp;</TT>&nbsp;
<BR><TT>-you don't know how the dongle protection routine works but you
quickly found the right <I>Bad_Guy </I>Flag.&nbsp;&nbsp;</TT>&nbsp;
<BR><TT>-your program is to slow to start/run . Some overbloated EXE or
DLL will check for a dongle, dongle ID and Seed Code and, if they can't
find them, will check again and again before telling you that you don't
have the requested hardware key. For that reason, those programs may check
for the dongle for 15 or sometimes +30 seconds. This even happens sometimes
after you "emulated" the Dongle. A real waste of time! (see <A HREF="#WellCAD">WellCAD</A>).&nbsp;&nbsp;</TT>&nbsp;
<BR><TT>3/Brute force approach:&nbsp;</TT>&nbsp;
<BR><TT>Close to the above solution, this one may be quite useful for program
that may react strangely when they are modified. This method just force
them to work the way you want (see <A HREF="#Ai Damage">Ai Damage</A>).</TT>&nbsp;
<BR><TT>4/You may use your own tips/findings like searching with Hiew the
bytes sequence 0xE900000000</TT>&nbsp;
<BR><TT>jmp Next_Instruction (see <A HREF="#OmniMark">OmniMark</A>).</TT>&nbsp;

<P><TT>In this essay, we'll just assume that you are familiar with cracking
because I won't give a lot of comments about all usual protections routines/tricks...
that don't have anything to see with the dongle protection nor will I spend
time to explain how to crack it when it will be quite obvious (most of
the time).&nbsp;&nbsp;&nbsp;</TT>&nbsp;

<P><TT>As said above, all programs cracked in this essay can be found and
download on their companies homepages (see links below).&nbsp;&nbsp;&nbsp;</TT>&nbsp;
<BR><TT>You'll find plenty of dongle softs to download for free on the
Net. Just learn how to search and you'll see what I mean.</TT>&nbsp;
<PRE><TT>OK, now let's have some fun!</TT></PRE>

<!-- TOOLS REQUIRED STARTS HERE -->
<br><br>
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" HEIGHT="45"  WIDTH= "100%">
<tr><td bgcolor="#C6E7C6"><center><font size=+2><font color=blue>Tools required</fonT></fonT></center><bR>
</td></tr></table>


<P><B>Hiew 5.66</B>&nbsp;
<BR><B>SoftICE 3.22</B>&nbsp;
<BR><B>W32Dasm v6.x and W32Dasm8.5</B>&nbsp;
<BR><B>+IDA PRO v3.7</B>&nbsp;
<BR><B>A taste of Zen Cracking</B>&nbsp;
<!-- TARGET URL/FTP STARTS HERE -->
<br><br>
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" HEIGHT="45"  WIDTH= "100%">
<tr><td bgcolor="#C6E7C6"><center><font size=+2><font color=blue>Target's URL/FTP</fonT></fonT></center><bR>
</td></tr></table>

<!-- DON'T FORGET TO PASTE HERE ALSO THE URL/FTP OF YOUR TARGET -->
<B>Targets'
url:</B>&nbsp;

<P><B>1) Micro-Cap V </B>(Spectrum SoftWare) <B><A HREF="javascript:if(confirm('http://www.cadlink.com/Download/down/mc52.zip  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.cadlink.com/Download/down/mc52.zip'" tppabs="http://www.cadlink.com/Download/down/mc52.zip">v2.01</A></B>
900Kb&nbsp;
<BR><B>2) Vision XL/XXL <A HREF="javascript:if(confirm('http://www.impuls-imaging.com/download.htm  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.impuls-imaging.com/download.htm#Vision XL/XXL'" tppabs="http://www.impuls-imaging.com/download.htm#Vision XL/XXL">v2.0</A></B>
(Impuls)&nbsp; 9.5Mb&nbsp;
<BR><B>3) ABBCS31<A HREF="javascript:if(confirm('http://www.klinkmann.com/download.htm  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.klinkmann.com/download.htm'" tppabs="http://www.klinkmann.com/download.htm"> v1.02</A>&nbsp;</B>
Klinkmann Automation Softs (DDE Servers)&nbsp; 420Kb&nbsp;
<BR><B>4) WellCAD v2.30</B> : <A HREF="javascript:if(confirm('ftp://ftp.alt.lu/pub/wellcad2.30/Windows95/Release.Full  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='ftp://ftp.alt.lu/pub/wellcad2.30/Windows95/Release.Full'" tppabs="ftp://ftp.alt.lu/pub/wellcad2.30/Windows95/Release.Full">Full
version</A>&nbsp; 10.5Mb or <A HREF="javascript:if(confirm('ftp://ftp.alt.lu/pub/wellcad2.30/Windows95/Release.Lite  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='ftp://ftp.alt.lu/pub/wellcad2.30/Windows95/Release.Lite'" tppabs="ftp://ftp.alt.lu/pub/wellcad2.30/Windows95/Release.Lite">Lite
version</A> 2.5Mb (similar but without help files and sample data files)&nbsp;
<BR><B>5) Label Craft <A HREF="javascript:if(confirm('http://www.axiworld.com/axtechpa/axaxicon.html  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.axiworld.com/axtechpa/axaxicon.html'" tppabs="http://www.axiworld.com/axtechpa/axaxicon.html">v6.01</A>
</B>(Axicon Softs)<B>&nbsp;</B> 1.2Mb&nbsp;
<BR><B>6) Ai Damage <A HREF="javascript:if(confirm('http://www.aitsuk.com/download.htm  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.aitsuk.com/download.htm'" tppabs="http://www.aitsuk.com/download.htm">v1.4</A>
</B>(Ai Training Services Ltd)&nbsp; 185Kb (requires the DK2 DESkey dongle
drivers -dk2wn95.386, dk2win32.dll...- if not installed on your system,
you can download them here: <A HREF="javascript:if(confirm('ftp://ftp.kcc.co.uk/pub/kcml/windk2drivers  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='ftp://ftp.kcc.co.uk/pub/kcml/windk2drivers'" tppabs="ftp://ftp.kcc.co.uk/pub/kcml/windk2drivers">Bdk2wn32.exe</A>
720Kb - read the essay for more infos-: )&nbsp;
<BR><B>7) Electro Chemistry <A HREF="javascript:if(confirm('http://www.sycopel.com/dload.htm  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sycopel.com/dload.htm'" tppabs="http://www.sycopel.com/dload.htm">12
Nov.1997 version</A> </B>(Sycopel Scientific Ltd) 531Kb.&nbsp;
<BR><B>8) IPLab <A HREF="javascript:if(confirm('http://www.iplab.com/iplwinupdt.html  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.iplab.com/iplwinupdt.html'" tppabs="http://www.iplab.com/iplwinupdt.html">v1.7</A></B>&nbsp;
(Signal Analytics Corp.) 1.5Mb&nbsp;
<BR><B>9) DigiSHOW.vld <A HREF="javascript:if(confirm('http://www.future-software.co.uk/download.htm  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.future-software.co.uk/download.htm'" tppabs="http://www.future-software.co.uk/download.htm">v1.24</A></B>
1.59Mb&nbsp;
<BR><B>A) Axon Engineer Pro <A HREF="javascript:if(confirm('http://userpages.itis.com/aeonsoft/dlupgrad.htm  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://userpages.itis.com/aeonsoft/dlupgrad.htm'" tppabs="http://userpages.itis.com/aeonsoft/dlupgrad.htm">v2.11e</A></B>
2.09Mb&nbsp;
<BR><B>B) FTI/DOE <A HREF="javascript:if(confirm('http://www.finite-tech.com/download.html  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.finite-tech.com/download.html'" tppabs="http://www.finite-tech.com/download.html">v.2.3.1.4</A></B>
2.78Mb&nbsp;
<BR><B>C) S-Tagger for FrameMaker <A HREF="javascript:if(confirm('http://www.trados.com/prod/wbload.htm  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.trados.com/prod/wbload.htm'" tppabs="http://www.trados.com/prod/wbload.htm">v2.0</A></B>
1.32Mb&nbsp;
<BR><B>D) XinTianMa <A HREF="javascript:if(confirm('http://www.cjkware.com/update.html  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.cjkware.com/update.html'" tppabs="http://www.cjkware.com/update.html">C version</A>
</B>1.04Mb&nbsp;
<BR><B>E) OmniMark <A HREF="javascript:if(confirm('http://www.exoterica.com/develop/download/v3r1a/win95hsp/om31a.exe  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.exoterica.com/develop/download/v3r1a/win95hsp/om31a.exe'" tppabs="http://www.exoterica.com/develop/download/v3r1a/win95hsp/om31a.exe">V3R1a
Win95</A></B> 1.88Mb&nbsp;
<BR>&nbsp;</TD>
<br><br>
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" HEIGHT="45"  WIDTH= "100%">
<tr><td bgcolor="#C6E7C6"><center><font size=+2><font color=blue>Program History</fonT></fonT></center><bR>
</td></tr></table>
<!-- PASTE HERE YOUR TARGET'S HISTORY (if any) -->
unknown
except Micro-Cap V&nbsp; which used, in the past, the Sentinel dongle.
New version use the Hasp driver.

<!-- REAL ESSAY CORPUS STARTS HERE -->
<br><br>
<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" HEIGHT="45"  WIDTH= "100%">
<tr><td bgcolor="#C6E7C6"><center><font size=+2><font color=blue>Essay</fonT></fonT></center><bR>
</td></tr></table>
<!-- PASTE HERE THE TEXT OF YOUR ESSAY
     THIS IS OF COURSE THE MOST IMPORTANT PART
     PLEASE CHECK THE MARGINS! SHOULD NOT BLAST
     NETSCAPE MARGINS OUT! HAVE A LOOK INSIDE
     YOUR OWN BROWSER WHEN YOU HAVE FINISHED!  -->
<A NAME="Micro Cap"></A><B><U><FONT SIZE=+2>Micro-Cap
V v2.10</FONT></U></B>
<BR><B>-Description:</B>
<BR>Integrated schematic editor and mixed analog/digital simulator that
provides an interactive sketch and simulate environment for electronics
engineers.
<BR><B>-OS:</B>
<BR>Win95 / NT(?)
<BR><B>-Protection:</B>
<BR>Dongle (parallel). Driver: <I>Hasp95.vxd</I> (c:\windows\system).
<BR><B>-Misc.:</B>
<BR>Does NOT run if no dongle detected.
<BR>&nbsp;

<P><TT>Apparently, Micro-Cap V programmers are the only guys who understood
that the dongle will not do all the job. They tried to add some improvements
to the protection scheme:</TT>
<BR><TT>-Fake flags (Bad or Good_Guy).</TT>
<BR><TT>-Several flags hidden at different locations (using different registers).</TT>
<BR><TT>-Delayed reactions (calling, checking and reacting routines).</TT>
<BR><TT>-Mathematical expressions for checking the RetCodes (though they
could improve this part).</TT>
<BR><TT>-Several calls with different Seed Codes.</TT>
<BR><TT>...</TT>

<P><TT>This is the first Hasp dongle of this essay. I hope you read Zafer's
essay about the various hasp-dongle services because I will not explain
this again. However, I will show you the main Hasp routine from Micro-Cap
as it is just a little different from the one describe by Zafer, but it
works just the same:</TT>

<P><TT>:0054141A 55&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
push ebp</TT>
<BR><TT>:0054141B 89E5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov ebp, esp</TT>
<BR><TT>:0054141D 60&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pushad</TT>
<BR><TT>:0054141E 88C7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov bh, al&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Service called</FONT></TT>
<BR><TT>:00541420 52&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
push edx</TT>
<BR><TT>:00541421 58&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop eax</TT>
<BR><TT>:00541422 8B5508&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov edx, dword
ptr [ebp+08]</TT>
<BR><TT>:00541425 8B750C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov esi, dword
ptr [ebp+0C]</TT>
<BR><TT>:00541428 8B3E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov edi, dword ptr [esi]</TT>
<BR><TT>:0054142A 80FF32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmp bh, 32</TT>
<BR><TT>:0054142D 7205&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jb 00541434</TT>
<BR><TT>:0054142F 8B7518&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov esi, dword
ptr [ebp+18]</TT>
<BR><TT>:00541432 8B06&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov eax, dword ptr [esi]</TT>
<BR><TT>:00541434 8B7510&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov esi, dword
ptr [ebp+10]</TT>
<BR><TT>:00541437 8B36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov esi, dword ptr [esi]</TT>
<BR><TT>:00541439 55&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
push ebp</TT>
<BR><TT>:0054143A E8B1D00000&nbsp;&nbsp; call 0054E4F0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Haspreg</FONT></TT>
<BR><TT>:0054143F 5D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop ebp</TT>
<BR><TT>:00541440 8B7D0C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov edi, dword
ptr [ebp+0C]</TT>
<BR><TT>:00541443 8907&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov dword ptr [edi], eax&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">; RetCode1</FONT></TT>
<BR><TT>:00541445 8B7D10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov edi, dword
ptr [ebp+10]</TT>
<BR><TT>:00541448 891F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov dword ptr [edi], ebx&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">; RetCode2</FONT></TT>
<BR><TT>:0054144A 8B7D14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov edi, dword
ptr [ebp+14]</TT>
<BR><TT>:0054144D 890F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov dword ptr [edi], ecx&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">; RetCode3</FONT></TT>
<BR><TT>:0054144F 8B7D18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov edi, dword
ptr [ebp+18]</TT>
<BR><TT>:00541452 8917&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov dword ptr [edi], edx&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">; RetCode3</FONT></TT>
<BR><TT>:00541454 61&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
popad</TT>
<BR><TT>:00541455 5D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop ebp</TT>
<BR><TT>:00541456 C21400&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ret 0014</TT>
<BR>&nbsp;

<P><TT>We will rewrite this routine in order to emulate the dongle because
there will be too may occurences to patch in this soft.</TT>

<P><TT>Running Micro-Cap will display the message box: '<I>Security Key
missing. Replace the key</I>'.</TT>
<BR><TT>With SoftICE, Bpx the above routine and run Micro-Cap.</TT>

<P><TT><U>The first break occures here</U>:</TT>

<P><TT>:00422C39 B801000000&nbsp;&nbsp; mov eax, 00000001&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Service#1</FONT></TT>
<BR><TT>...</TT>
<BR><TT>:00422C5B E8BAE71100&nbsp;&nbsp; call 0054141A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; IsHasp</FONT></TT>
<BR><TT>:00422C60 8B45F0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov eax, dword
ptr [ebp-10]&nbsp;&nbsp; <FONT COLOR="#3333FF">; Store RetCode1 in EAX</FONT></TT>
<BR><TT>:00422C63 89EC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov esp, ebp</TT>
<BR><TT>:00422C65 5D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop ebp</TT>
<BR><TT>:00422C66 5A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop edx</TT>
<BR><TT>:00422C67 59&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop ecx</TT>
<BR><TT>:00422C68 5B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop ebx</TT>
<BR><TT>:00422C69 C3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ret</TT>
<BR><TT>The caller:</TT>
<BR><TT>:00422AEC E82F010000&nbsp;&nbsp; call 00422C20</TT>
<BR><TT>:00422AF1 85C0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
test eax, eax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Check if OK</FONT></TT>
<BR><TT>:00422AF3 752D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422B22&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Good_Guy jump</FONT></TT>

<P><TT><FONT COLOR="#000000">Of course, the RetCode1 should be equal to
1.</FONT></TT>

<P><TT><FONT COLOR="#000000"><U>The second break</U>:</FONT></TT>

<P><TT><FONT COLOR="#000000">:00422E8D B805000000&nbsp;&nbsp; mov eax,
00000005</FONT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Service#5</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E92 89542414&nbsp;&nbsp;&nbsp;&nbsp;
mov dword ptr [esp+14], edx</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E96 E87FE51100&nbsp;&nbsp; call 0054141A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; HaspStatus</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E9B 8B442408&nbsp;&nbsp;&nbsp;&nbsp;
mov eax, dword ptr [esp+08]&nbsp;&nbsp; </FONT><FONT COLOR="#3333FF">;
Parallel Port # (RetCode3)</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E9F 8B7C2404&nbsp;&nbsp;&nbsp;&nbsp;
mov edi, dword ptr [esp+04]&nbsp;&nbsp; </FONT><FONT COLOR="#3333FF">;
Type of Hasp (Retcode2)</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422EA3 A37CF65500&nbsp;&nbsp; mov dword
ptr [0055F67C], eax</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422EA8 83FF01&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp edi, 00000001&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; Is it a Memo-Hasp?</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422EAB 740D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
je 00422EBA</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422EAD B8FCFFFFFF&nbsp;&nbsp; mov eax,
FFFFFFFC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; Bad_Guy</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422EB2 83C410&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
add esp, 00000010</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422EB5 5F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop edi</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422EB6 5A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop edx</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422EB7 59&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop ecx</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422EB8 5B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop ebx</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422EB9 C3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ret</FONT></TT>
<BR><TT><FONT COLOR="#000000">* Referenced by a (C)onditional Jump at Address:00422EAB</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422EBA 31C0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
xor eax, eax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; Good_Guy</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422EBC 83C410&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
add esp, 00000010</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422EBF 5F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop edi</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422EC0 5A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop edx</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422EC1 59&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop ecx</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422EC2 5B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop ebx</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422EC3 C3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ret</FONT></TT>

<P><TT><FONT COLOR="#000000">No surprises yet: after checking if there
is a Hasp dongle connected, it checks its type (Memo-Hasp). It doesn't
care if it is a Memo-Hasp-1 or a Memo-Hasp-4 as Retcode1 is not verified.</FONT></TT>
<BR>Both

<P><TT><FONT COLOR="#000000"><U>The 3rd break</U>:</FONT></TT>

<P><TT><FONT COLOR="#000000">:00422C0E B802000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov eax, 00000002</FONT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Service#2</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422C13 E802E81100&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
call 0054141A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; HaspCode</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422C18 5D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop ebp</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422C19 5F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop edi</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422C1A 5E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop esi</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422C1B C20400&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ret 0004</FONT></TT>

<P><TT><FONT COLOR="#000000">The caller:</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422B5B E864000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
call 00422BC4</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422B60 8B1424&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov edx, dword ptr [esp]&nbsp;&nbsp;&nbsp; </FONT><FONT COLOR="#3333FF">;
Store RetCode1 in Edx</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422B63 81EACA190000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sub edx, 000019CA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; Edx-0x19CA</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422B69 B905000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov ecx, 00000005</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422B6E 89D0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov eax, edx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; Store in Eax</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422B70 C1FA1F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sar edx, 1F</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422B73 F7F9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
idiv ecx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; Eax/5 and store result in Eax</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422B75 3D982D0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp eax, 00002D98&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; Is it correct?</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422B7A 7405&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
je 00422B81&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; jmp over if OK</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422B7C BE01000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov esi, 00000001&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; Set Bad_Guy#1 Flag discreetly so that stupid</FONT></TT>
<BR><TT><FONT COLOR="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; crackers will never find it!</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422B81 817C24046DF60000&nbsp; cmp dword
ptr [esp+04],F66D </FONT><FONT COLOR="#3333FF">; Check RetCode2</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422B89 0F8566FFFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422AF5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; Bad_Guy#2 jump</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422B8F 817C24086CD60000&nbsp; cmp dword
ptr [esp+08],D66C </FONT><FONT COLOR="#3333FF">; Check RetCode3</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422B97 0F8558FFFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422AF5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; Bad_Guy#2 jump</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422B9D 817C240C973B0000&nbsp; cmp dword
ptr [esp+0C],3B97 </FONT><FONT COLOR="#3333FF">; Check RetCode4</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422BA5 0F854AFFFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422AF5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; Bad_Guy#2 jump</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422BAB EB80&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jmp 00422B2D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; JUMP if OK and make him believe everything</FONT></TT>
<BR><TT><FONT COLOR="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; is fine...</FONT></TT>
<BR><TT><FONT COLOR="#000000">...</FONT></TT>
<BR><TT><FONT COLOR="#000000">...</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422B2D 85F6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
test esi, esi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; ...and check Bad_Guy#1 Flag!</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422B2F 7507&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422B38&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; Bad_Guy_Jump.</FONT></TT>
<BR><TT>&nbsp;</TT>
<BR><TT>RetCodes 2, 3 and 4 are displayed in the code (0xF66D, 0xD66C,
0x3B97). To check the RetCode1, the program uses simple mathematical expressions
from offset 422B63 to offset 422B75.</TT>
<BR><TT>Finding the RetCode1 value is simple.</TT>
<BR><TT>We have:</TT>
<BR><TT>0x2D98 = (RetCode1 - 0x19CA) / 5</TT>
<BR><TT>So:</TT>
<BR><TT>RetCode1 = (0x2D98 * 5) + 0x19CA)</TT>
<BR><TT>RetCode1 = 0xFDC2</TT>
<BR><TT>You can see that if one of the 3 last RetCodes is wrong, it will
clearly send you on the Bad_Guy#2.</TT>
<BR><TT>But it will discreetly set the Bag_guy#1 flag (mov esi,1) if the
first RetCode is wrong and will go ahead as if everything was fine before
checking it later at offset 422B2F.</TT>
<BR><TT>&nbsp;</TT>

<P><TT><FONT COLOR="#000000"><U>The 4th break</U>:</FONT></TT>

<P><TT>This time, the program will read a block from the dongle, and check
if no error occured (RetCode3)</TT>

<P><TT>:00422CE2 B832000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov
eax, 00000032&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Service#32</FONT></TT>
<BR><TT>:00422CE7 31D2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
xor edx, edx</TT>
<BR><TT>:00422CE9 E82CE71100&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
call 0054141A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; ReadBlock</FONT></TT>
<BR><TT>:00422CEE 807D02EA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp byte ptr [ebp+02], EA&nbsp;&nbsp; <FONT COLOR="#3333FF">; Check correct
value</FONT></TT>
<BR><TT>:00422CF2 741F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
je 00422D13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; jmp if OK</FONT></TT>
<BR><TT>:00422CF4 837D7A00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp dword ptr [ebp+7A], 0&nbsp;&nbsp; <FONT COLOR="#3333FF">; Check RetCode3
(status Code)</FONT></TT>
<BR><TT>:00422CF8 7519&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; jmp if NOT correct as well</FONT></TT>
<BR><TT>:00422CFA B801000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov eax, 00000001&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Bad_Guy flag</FONT>&nbsp;<FONT COLOR="#3333FF">
but make it looks</FONT></TT>
<BR><TT><FONT COLOR="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; like a Good_Guy Flag!</FONT></TT>
<BR><TT>:00422CFF 8DA582000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lea esp, dword
ptr [ebp+82]</TT>
<BR><TT>..</TT>
<BR><TT>:00422D0A C3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ret&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Back to caller</FONT></TT>
<BR><TT>...</TT>
<BR><TT>...</TT>
<BR><TT>:00422D13 8B457A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov eax, dword ptr [ebp+7A] <FONT COLOR="#3333FF">; store status code in
Eax</FONT></TT>
<BR><TT>:00422D16 8DA582000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lea esp, dword
ptr [ebp+82]</TT>
<BR><TT>..</TT>
<BR><TT>:00422D21 C3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ret&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Back to caller</FONT></TT>
<BR><TT>...</TT>
<BR><TT>...</TT>
<BR><TT>:00422B22 E831030000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
call 00422E58</TT>
<BR><TT>:00422B27 89C6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov esi, eax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; store in esi as well</FONT></TT>
<BR><TT>:00422B29 85C0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
test eax, eax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Check if OK</FONT></TT>
<BR><TT>:00422B2B 7418&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
je 00422B45&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; je Good_Guy</FONT></TT>
<BR><TT>:00422B2D 85F6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
test esi, esi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Check again to confuse...</FONT></TT>
<BR><TT>:00422B2F 7507&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422B38&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; jne Bad_Guy</FONT></TT>
<BR><TT>&nbsp;</TT>
<BR><TT>We could think that the <I>mov eax,1</I> is our Good_Guy because
right above, it checks the RetCode3 (equal to 0x0 if no error) and jump
if an error was returned.</TT>
<BR><TT>But it stores this RetCode into Eax (:422D13) and later will store
it into Esi too, and will check both registers to see if it's OK. It is
clear that, if the dongle was connected, the program should never reach
offset :422CF4.</TT>
<BR><TT>0xEA is probably a byte calculated somewhere depending on the dongle
RetCode (it is not RetCode1, 2, 3 or 4).&nbsp; To crack this will have
to store 0xEa into ebp+2 and to ensure that the RetCode3 will be equal
to 0x0.</TT>
<BR>&nbsp;

<P><TT>Now, Micro-Cap V seems to work fine but it still check for the dongle
depending on which key is pressed.</TT>
<BR><TT>&nbsp;</TT>

<P><TT><FONT COLOR="#000000"><U>The 5th break</U>:</FONT></TT>

<P><TT>Here, the program will check again Service#1 (IsHasp) but in another
location.</TT>

<P><TT><FONT COLOR="#000000"><U>The 6th break</U>:</FONT></TT>

<P><TT>Now it calls again Service 2.</TT>

<P><TT><FONT COLOR="#000000">:00422C0E B802000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov eax, 00000002</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422C13 E802E81100&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
call 0054141A</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422C18 5D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop ebp</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422C19 5F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop edi</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422C1A 5E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop esi</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422C1B C20400&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ret 0004</FONT></TT>

<P><TT><FONT COLOR="#000000">The Caller:</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422D6A E855FEFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
call 00422BC4</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422D6F 6681FE8203&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp si, 0382</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422D74 7527&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D9D</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422D76 813C24C7710000&nbsp;&nbsp;&nbsp;
cmp dword ptr [esp], 000071C7</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422D7D 75C8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D47</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422D7F 817C2404935B0000&nbsp; cmp dword
ptr [esp+04], 00005B93</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422D87 75BE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D47</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422D89 817C2408E1BF0000&nbsp; cmp dword
ptr [esp+08], 0000BFE1</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422D91 75B4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D47</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422D93 817C240C900D0000&nbsp; cmp dword
ptr [esp+0C], 00000D90</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422D9B 75AA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D47</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422D9D 6681FEE486&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp si, 86E4</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DA2 752B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422DCF</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DA4 813C248BF60000&nbsp;&nbsp;&nbsp;
cmp dword ptr [esp], 0000F68B</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DAB 759A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D47</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DAD 817C2404D3B40000&nbsp; cmp dword
ptr [esp+04], 0000B4D3</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DB5 7590&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D47</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DB7 817C2408FE0E0000&nbsp; cmp dword
ptr [esp+08], 00000EFE</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DBF 7586&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D47</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DC1 817C240CD43F0000&nbsp; cmp dword
ptr [esp+0C], 00003FD4</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DC9 0F8578FFFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D47</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DCF 6681FE9907&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp si, 0799</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DD4 7537&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422E0D</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DD6 813C2411560000&nbsp;&nbsp;&nbsp;
cmp dword ptr [esp], 00005611</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DDD 0F8564FFFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D47</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DE3 817C2404BB6E0000&nbsp; cmp dword
ptr [esp+04], 00006EBB</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DEB 0F8556FFFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D47</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DF1 817C2408925C0000&nbsp; cmp dword
ptr [esp+08], 00005C92</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DF9 0F8548FFFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D47</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422DFF 817C240C8EB60000&nbsp; cmp dword
ptr [esp+0C], 0000B68E</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E07 0F853AFFFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D47</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E0D 6681FE3E05&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp si, 053E</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E12 7537&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422E4B</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E14 813C24EB6F0000&nbsp;&nbsp;&nbsp;
cmp dword ptr [esp], 00006FEB</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E1B 0F8526FFFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D47</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E21 817C2404945D0000&nbsp; cmp dword
ptr [esp+04], 00005D94</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E29 0F8518FFFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D47</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E2F 817C24087D200000&nbsp; cmp dword
ptr [esp+08], 0000207D</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E37 0F850AFFFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D47</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E3D 817C240CCEAE0000&nbsp; cmp dword
ptr [esp+0C], 0000AECE</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E45 0F85FCFEFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 00422D47</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E4B 31C0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
xor eax, eax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; Good_Guy</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E4D 83C410&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
add esp, 00000010</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E50 5E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop esi</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E51 5A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop edx</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E52 59&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop ecx</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E53 5B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop ebx</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422E54 C3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ret</FONT></TT>
<BR><TT><FONT COLOR="#000000">..</FONT></TT>
<BR><TT><FONT COLOR="#000000">..</FONT></TT>
<BR><TT>:00422D47 B8B13A0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov eax, 00003AB1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Bad_Guy</FONT></TT>
<BR><TT>:00422D4C 83C410&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
add esp, 00000010</TT>
<BR><TT>:00422D4F 5E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop esi</TT>
<BR><TT>:00422D50 5A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop edx</TT>
<BR><TT>:00422D51 59&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop ecx</TT>
<BR><TT>:00422D52 5B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop ebx</TT>
<BR><TT>:00422D53 C3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ret</TT>
<BR><TT>&nbsp;</TT>
<BR><TT>Depending on the value of Esi ( 0x<FONT COLOR="#000000">0382, 0x86E4,
0x0799 or 0x053E) the program will check for different RetCodes (they all
are shown in the code) and if it's OK, will clear Eax (Good_Guy) otherwise
will make you jump to offset :422D47.</FONT></TT>
<BR><TT><FONT COLOR="#000000">If Esi has a different value (this shouldn't
happen) the program will get to the Good_Guy as well.</FONT></TT>
<BR><TT><FONT COLOR="#000000">To crack this, we will simply xor Ecx (on
the stack as it is saved there before the call to the Hasp routine) during
a call to Service 2 and therefore we will always reach our Good_Guy. Clearing
Ecx will not affect the call to Service 2 I described before this one as
it is unused (saved on the stack).</FONT></TT>
<BR>&nbsp;

<P><TT>There is a last break when exiting the program:</TT>

<P><TT><FONT COLOR="#000000"><U>The 7th break</U>:</FONT></TT>

<P><TT><FONT COLOR="#000000">:00422F38 B806000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov eax, 00000006</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422F3D EBDC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jmp 00422F1B</FONT></TT>
<BR><TT><FONT COLOR="#000000">...</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422F1B E8FAE41100&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
call 0054141A</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422F20 8B45F8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov eax, dword ptr [ebp-08]</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422F23 85C0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
test eax, eax</FONT></TT>
<BR><TT><FONT COLOR="#000000">:00422F25 7418&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
je 00422F3F</FONT></TT>
<BR><TT>&nbsp;</TT>
<BR><TT>Here, the program just check if any error occured.&nbsp;</TT>
<BR><TT>&nbsp;</TT>
<BR><TT>There are still few xrefs to the main Hasp routine (services 1,
6...) but it doesn't matter as we will 'emulate' the dongle and this will
work for thoses xrefs as well. However, one of them is a call to service
0x29 (HaspID) at offset :422BF6 that apparently the program doesn't reach.
We will not crack it.</TT>
<BR>&nbsp;

<P><TT>As there's not enough room in the main Hasp routine to write our
own one, we will do it mostly at offset :514E4F0 that is called by this
routine:</TT>
<BR><TT>All changes are shown in red:</TT>

<P><TT>.0514141A: 55&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
push&nbsp;&nbsp; ebp</TT>
<BR><TT>.0514141B: 89E5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; ebp,esp</TT>
<BR><TT>.0514141D: 60&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pushad</TT>
<BR><TT>.0514141E: 88C7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; bh,al&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT COLOR="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; bh=Hasp Service called</FONT></TT>
<BR><TT>.<FONT COLOR="#CC0000">05141420</FONT>: 80FF02&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp&nbsp;&nbsp;&nbsp; bh,02&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Is it Service#2 ?</FONT></TT>
<BR><TT>.<FONT COLOR="#CC0000">05141423</FONT>: 0F8510000000&nbsp;&nbsp;&nbsp;&nbsp;
jne&nbsp;&nbsp; .00141439&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; jump over if not</FONT></TT>
<BR><TT>.<FONT COLOR="#CC0000">05141429</FONT>: 66C745240000&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; w,[ebp][00024],00000&nbsp; <FONT COLOR="#3333FF">;
otherwise clear Esi</FONT></TT>
<BR><TT>.<FONT COLOR="#CC0000">0514142F</FONT>: E905000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jmp&nbsp;&nbsp; .000141439&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Go ahead</FONT></TT>
<BR><TT>.05141434: 8B7510&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; esi,[ebp][00010]<FONT COLOR="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; unused</FONT></TT>
<BR><TT>.05141437: 8B36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; esi,[esi]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT COLOR="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
; unused</FONT></TT>
<BR><TT>.05141439: 55&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
push&nbsp;&nbsp; ebp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; back to original code</FONT></TT>
<BR><TT>.0514143A: E8B1D00000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; call&nbsp;
.<U>00514E4F0</U>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; call our new routine</FONT></TT>
<BR><TT>.0514143F: 5D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop&nbsp;&nbsp;&nbsp; ebp</TT>
<BR><TT>.05141440: 8B7D0C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; edi,[ebp][0000C]</TT>
<BR><TT>.05141443: 8907&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; [edi],eax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; RetCode1</FONT></TT>
<BR><TT>.05141445: 8B7D10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; edi,[ebp][00010]</TT>
<BR><TT>.05141448: 891F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; [edi],ebx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; RetCode2</FONT></TT>
<BR><TT>.0514144A: 8B7D14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; edi,[ebp][00014]</TT>
<BR><TT>.0514144D: 890F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; [edi],ecx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; RetCode3</FONT></TT>
<BR><TT>.0514144F: 8B7D18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; edi,[ebp][00018]</TT>
<BR><TT>.05141452: 8917&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; [edi],edx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; RetCode4</FONT></TT>
<BR><TT>&nbsp;</TT>

<P><TT><B><FONT COLOR="#000000">.</FONT></B><U><FONT COLOR="#CC0000">0514E4F0</FONT></U><B><FONT COLOR="#000000">:</FONT></B>
80FF01&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmp&nbsp;&nbsp;&nbsp;
bh,001&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Is it Service#1 ?</FONT></TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E4F3</FONT>: 7505&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne&nbsp;&nbsp; .00014E4FA</TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E4F5</FONT>: B801000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; eax,000000001&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; RetCode1</FONT></TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E4FA</FONT>: 80FF02&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp&nbsp;&nbsp;&nbsp; bh,002&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Is it Service#2 ?</FONT></TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E4FD</FONT>: 7519&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne&nbsp;&nbsp; .00014E518</TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E4FF</FONT>: B8C2FD0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; eax,00000FDC2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; RetCode1</FONT></TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E504</FONT>: BB6DF60000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; ebx,00000F66D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; RetCode2</FONT></TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E509</FONT>: B96CD60000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; ecx,00000D66C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; RetCode3</FONT>&nbsp;</TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E50E</FONT>: BA973B0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; edx,000003B97&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; RetCode4</FONT>&nbsp;</TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E513</FONT>: E925000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jmp&nbsp;&nbsp; .00014E53D</TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E518</FONT>: 80FF05&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp&nbsp;&nbsp;&nbsp; bh,005&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Is it Service#5 ?</FONT></TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E51B</FONT>: 750C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne&nbsp;&nbsp; .00014E529</TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E51D</FONT>: BB01000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; ebx,000000001&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; RetCode2</FONT>&nbsp;</TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E522</FONT>: B901000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; ecx,000000001&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; RetCode3</FONT>&nbsp;</TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E527</FONT>: EB14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jmps&nbsp; .00014E53D</TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E529</FONT>: 80FF06&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp&nbsp;&nbsp;&nbsp; bh,006&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Is it Service#6 ?</FONT></TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E52C</FONT>: 740D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
je&nbsp;&nbsp;&nbsp; .00014E53B</TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E52E</FONT>: 80FF32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp&nbsp;&nbsp;&nbsp; bh,032&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Is it Service#32 ?</FONT></TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E531</FONT>: 0F8504000000&nbsp;&nbsp;&nbsp;&nbsp;
jne&nbsp;&nbsp; .00014E53B</TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E537</FONT>: C6451CEA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; b,[ebp][0001C],0EA&nbsp;&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
store our 0xEA</FONT></TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E53B</FONT>: 33C9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
xor&nbsp;&nbsp;&nbsp; ecx,ecx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; clear RetCode3 (NO error)</FONT></TT>
<BR><TT>.<FONT COLOR="#CC0000">0514E53D</FONT>: C3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
retn&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; back to Hasp main routine</FONT></TT>
<BR><TT>.<FONT COLOR="#000000">0514E53E</FONT>: 8D3534FC5600&nbsp;&nbsp;&nbsp;&nbsp;
lea&nbsp;&nbsp;&nbsp; esi,[00056FC34]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; will never reach this part.</FONT></TT>
<BR><TT>&nbsp;</TT>
<BR><TT>Everything works quite well but it may be safer not to forget the
call to Service 0x29 that we didn't patch, just in case the program would
reach it one of these days...&nbsp;</TT>
<BR><TT>&nbsp;</TT>

<P>
<HR WIDTH="100%">

<P><A NAME="Vision"></A><B><U><FONT SIZE=+2>Vision XL/XXL v2.0</FONT></U></B>
<BR><B>-Description:</B>
<BR>High performance image processing and image analysis system.
<BR><B>-OS:</B>
<BR>Win95/NT
<BR><B>-Protection:</B>
<BR>Dongle (parallel or serial key). Driver: <I>Hardlock.vxd</I> (c:\windows\system).
<BR><B>-Misc.:</B>
<BR>Run as a DEMO if no dongle detected (Save, save as, copy disabled,
macros disabled after 30 program runs...).

<P><TT>Described as "seeing the invisible", this is a very sophisticated
and extremely expensive soft. For those reasons, we could only expect a
strong or at least, a good protection. Unfortunately, its protection is
really stupid, and then, the most amazing is that we won't even have to
care about the dongle to crack it!</TT>

<P><TT>During its installation, the program added the file <I>Hardlock.vxd</I>
and told us that we need to restart Windows before running it (to load
the dongle driver!).</TT>

<P><TT>Put a BPIO -H 378 with SoftICE and then run VisionXXL.</TT>
<BR><TT>Nothing happens!&nbsp;</TT> <TT>The program doesn't seem to check
the parallel port.&nbsp;</TT>

<P><TT>After a quick check at the huge documentation (25Mb is MS-Word format!),
I found this:</TT>
<BR><TT><FONT COLOR="#3333FF">"The security key can be reversed to be used
on a serial interface port...".</FONT></TT>
<BR><TT><FONT COLOR="#000000">I read that there are some lines to add to
your <I>Autoexec.bat</I> as well (SET HL_SEARCH=2f8s,...where 2f8 denotes
the IO address of the serial port,and s denotes the serial port. The ellipsis
... is used to indicate that you can check several ports one after the
other.).</FONT></TT>

<P><TT><FONT COLOR="#000000">OK, but let's just forget the dongle for now!</FONT></TT>
<BR><TT><FONT COLOR="#000000">Re-run the program. You'll get the big nagscreen/bitmap
telling you that the program is running in demo mode.</FONT></TT>
<BR><TT><FONT COLOR="#000000">As the "Save" feature is disabled, press
it in the target's toolbar. The following message box pops up:</FONT></TT>
<BR><TT><FONT COLOR="#3333FF">"Sorry, this function is not available in
demo mode"</FONT></TT>
<BR><TT><FONT COLOR="#000000">Put a BPX MessageBoxA and press "Save" again.</FONT></TT>
<BR><TT><FONT COLOR="#000000">SoftICE pops. Press &lt;F11>, click 'OK'
and press &lt;F12> 3 times. You'll land here:</FONT></TT>
<BR>&nbsp;

<P><TT><FONT COLOR="#000000">.000CA432: E899820600&nbsp;&nbsp;&nbsp;&nbsp;
call&nbsp; .0001326D0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT COLOR="#3333FF">;
Check if Full or Demo mode</FONT></TT>
<BR><TT><FONT COLOR="#000000">.000CA437: 85C0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
test&nbsp;&nbsp; eax,eax</FONT></TT>
<BR><TT><FONT COLOR="#000000">.000CA439: 740A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
je&nbsp;&nbsp;&nbsp; .0000CA445&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; Good_Guy_Jump</FONT></TT>
<BR><TT><FONT COLOR="#000000">.000CA43B: E840EBF4FF&nbsp;&nbsp;&nbsp;&nbsp;
call&nbsp; .000018F80&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT COLOR="#3333FF">;
Our MessageBoxA</FONT></TT>
<BR><TT><FONT COLOR="#000000">.000CA440: E975040000&nbsp;&nbsp;&nbsp;&nbsp;
jmp&nbsp;&nbsp; .0000CA8BA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT COLOR="#3333FF">;
Bad_Guy_Exit</FONT></TT>
<BR><TT><FONT COLOR="#000000">.000CA445: E8127D0B00&nbsp;&nbsp;&nbsp;&nbsp;
call&nbsp; .00018215C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </FONT><FONT COLOR="#3333FF">;
Good_Guy_Go_Ahead</FONT></TT>

<P><TT><FONT COLOR="#000000">Those who are familiar with "disabled features"
cracking won't need to read my comments to understand this: this is a stupid
typical protection used so much often for this kind of program.</FONT></TT>
<BR>&nbsp;
<BR><TT><FONT COLOR="#000000">Let's have a look at the .0001326D0 routine:</FONT></TT>

<P><TT><FONT COLOR="#000000">001326D0: 8B81E8000000&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;
eax,[ecx][0000000E8]</FONT></TT>
<BR><TT><FONT COLOR="#000000">001326D6: 85C0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
test&nbsp;&nbsp; eax,eax</FONT></TT>
<BR><TT><FONT COLOR="#000000">001326D8: 740D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
je&nbsp;&nbsp;&nbsp; .0001326E7&nbsp;</FONT></TT>
<BR><TT><FONT COLOR="#000000">001326DA: 8B4804&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; ecx,[eax][00004]</FONT></TT>
<BR><TT><FONT COLOR="#000000">001326DD: 85C9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
test&nbsp;&nbsp; ecx,ecx</FONT></TT>
<BR><TT><FONT COLOR="#000000">001326DF: 7406&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
je&nbsp;&nbsp;&nbsp; .0001326E7&nbsp;</FONT></TT>
<BR><TT><FONT COLOR="#000000">001326E1: B801000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; eax,000000001&nbsp;&nbsp;&nbsp; </FONT><FONT COLOR="#3333FF">;
Bad_Guy_Flag</FONT></TT>
<BR><TT><FONT COLOR="#000000">001326E6: C3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
retn</FONT></TT>
<BR><TT><FONT COLOR="#000000">001326E7: 33C0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
xor&nbsp;&nbsp;&nbsp; eax,eax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT><FONT COLOR="#3333FF">; Good_Guy_Flag</FONT></TT>
<BR><TT><FONT COLOR="#000000">001326E9: C3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
retn</FONT></TT>

<P><TT><FONT COLOR="#000000">This routine is called as soon as you run
the program (to decide if it's a Demo or full working version) and each
time you'll press or try to use one of the disabled features.</FONT></TT>
<BR><TT><FONT COLOR="#000000">Obviously, patching the first <I>test eax,eax</I>
or changing the <I>mov eax,1</I> will be enough to crack this dongle protection.</FONT></TT>

<P>
<HR WIDTH="100%">
<BR>&nbsp;

<P><A NAME="ABBCS31"></A><B><U><FONT SIZE=+2>ABBCS31 v1.02</FONT></U></B>
<BR><B>-Description:</B>
<BR>DDE (Dynamic Data Exchange) Server allowing other Windows application
programs to access the data from the ABB Procontic CS31 automation system.
<BR><B>-OS:</B>
<BR>Win95/NT
<BR><B>-Protection:</B>
<BR>Dongle (parallel key). Driver: <I>Hasp95.vxd</I> (c:\windows\system).
<BR><B>-Misc.:</B>
<BR>Run as a time-limited DEMO if no dongle detected (will only run 1 hour).
<BR>&nbsp;

<P><TT>At the end of the installation setup, we get a "reboot to activate
HASP driver!" message. So we know where we are and where we going! The
program added the file <I>C:\Windows\System\Hasp95.vxd</I> and the following
line in the Registry: <I>'HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\VxD\HASP95'</I>.</TT>

<P><TT>With HIEW5.66, we can quickly find the Hasp main routine located
in the <I>Abbcs31.exe</I> file (193Kb).&nbsp;</TT>
<BR><TT>It starts at offset :00001AC9. Now we can BPX it with SoftICE (don't
forget to add 0x400000 to the offset from Hiew to SoftICE ):</TT>
<BR><TT>&nbsp;&nbsp; BPX 401AC9</TT>

<P><TT>Running ABBCS32, we'll get 3 breaks. Callers are:</TT>
<BR><TT>:401C9D</TT>
<BR><TT>:401D0C</TT>
<BR><TT>:401D8A</TT>

<P><TT>Here is the code (again from Hiew):</TT>

<P><TT>.00001C97: A1C40A4200&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; eax,[000420AC4]&nbsp;&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
eax=0x05</FONT></TT>
<BR><TT>.00001C9C: 50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
push&nbsp;&nbsp; eax</TT>
<BR><TT>.00001C9D: E827FEFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">call&nbsp; .000001AC9</FONT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Hasp routine service #5</FONT></TT>
<BR><TT>.00001CA2: 83C424&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
add&nbsp;&nbsp;&nbsp; esp,024&nbsp;</TT>
<BR><TT>.00001CA5: 8B45CC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; eax,[ebp][-0034]</TT>
<BR><TT>.00001CA8: A3A0204200&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; [0004220A0],eax</TT>
<BR><TT>.00001CAD: 837DD000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp&nbsp;&nbsp;&nbsp; d,[ebp][-0030],0&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
Is it a Hasp-3 (RetCode2=0)?</FONT></TT>
<BR><TT>.00001CB1: 0F850C000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne&nbsp;&nbsp; .000001CC3&nbsp;</TT>
<BR><TT>.00001CB7: C745C401000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; d,[ebp][-003C],1&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
Yes: Good_Guy_Flag</FONT></TT>
<BR><TT>.00001CBE: E907000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jmp&nbsp;&nbsp; .000001CCA&nbsp;</TT>
<BR><TT>.00001CC3: C745C400000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; d,[ebp][-003C],0&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
Bad_Guy_Flag</FONT></TT>
<BR><TT>.00001CCA: 837DC400&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp&nbsp;&nbsp;&nbsp; d,[ebp][-003C],0&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
Is it OK?</FONT></TT>
<BR><TT>.00001CCE: 0F8446000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
je&nbsp;&nbsp;&nbsp; .000001D1A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; No, send_Him_Away...</FONT></TT>
<BR><TT>.00001CD4: C705C40A420001000000&nbsp; mov&nbsp;&nbsp;&nbsp; d,[000420AC4],1&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; otherwise Go_Ahead</FONT></TT>
<BR><TT>...</TT>
<BR><TT>.00001D06: A1C40A4200&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; eax,[000420AC4]&nbsp;&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
eax=0x01</FONT></TT>
<BR><TT>.00001D0B: 50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
push&nbsp;&nbsp; eax</TT>
<BR><TT>.00001D0C: E8B8FDFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">call&nbsp; .000001AC9</FONT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Hasp routine service #1</FONT></TT>
<BR><TT>.00001D11: 83C424&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
add&nbsp;&nbsp;&nbsp; esp,024&nbsp;</TT>
<BR><TT>.00001D14: 8B45D4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; eax,[ebp][-002C]</TT>
<BR><TT>.00001D17: 8945C4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; [ebp][-003C],eax</TT>
<BR><TT>.00001D1A: 837DC400&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp&nbsp;&nbsp;&nbsp; d,[ebp][-003C],0&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
Is it a Hasp Dongle (RetCode1=1)?</FONT></TT>
<BR><TT>.00001D1E: 0F84E7000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
je&nbsp;&nbsp;&nbsp; .000001E0B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Bad_Guy_Jump...</FONT></TT>
<BR><TT>.00001D24: C705C40A420002000000&nbsp; mov&nbsp;&nbsp;&nbsp; d,[000420AC4],2&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; otherwise Go_Ahead</FONT></TT>
<BR><TT>...</TT>
<BR><TT>.00001D84: A1C40A4200&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; eax,[000420AC4]&nbsp;&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
eax=0x02</FONT></TT>
<BR><TT>.00001D89: 50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
push&nbsp;&nbsp; eax</TT>
<BR><TT>.00001D8A: E83AFDFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">call&nbsp; .000001AC9</FONT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Hasp routine service #2</FONT>&nbsp;</TT>
<BR><TT>.00001D8F: 83C424&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
add&nbsp;&nbsp;&nbsp; esp,024&nbsp;</TT>
<BR><TT>.00001D92: C705C00A420000000000&nbsp; mov&nbsp;&nbsp;&nbsp; d,[000420AC0],0</TT>
<BR><TT>.00001D9C: A1AC204200&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; eax,[0004220AC]</TT>
<BR><TT>.00001DA1: C1E004&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
shl&nbsp;&nbsp;&nbsp; eax,004</TT>
<BR><TT>.00001DA4: 8B4DD4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; ecx,[ebp][-002C]</TT>
<BR><TT>.00001DA7: 398818204200&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp&nbsp;&nbsp;&nbsp; [eax][000422018],ecx<FONT COLOR="#3333FF">; Is RetCode1=0x7A17
?</FONT></TT>
<BR><TT>.00001DAD: 0F8551000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne&nbsp;&nbsp; .000001E04&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Bad_Guy_Jump</FONT></TT>
<BR><TT>.00001DB3: A1AC204200&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; eax,[0004220AC]</TT>
<BR><TT>.00001DB8: C1E004&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
shl&nbsp;&nbsp;&nbsp; eax,004</TT>
<BR><TT>.00001DBB: 8B4DD0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; ecx,[ebp][-0030]</TT>
<BR><TT>.00001DBE: 39881C204200&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp&nbsp;&nbsp;&nbsp; [eax][00042201C],ecx<FONT COLOR="#3333FF">; Is RetCode2=0x768A
?</FONT></TT>
<BR><TT>.00001DC4: 0F853A000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne&nbsp;&nbsp; .000001E04&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Bad_Guy_Jump</FONT>&nbsp;</TT>
<BR><TT>.00001DCA: A1AC204200&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; eax,[0004220AC]</TT>
<BR><TT>.00001DCF: C1E004&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
shl&nbsp;&nbsp;&nbsp; eax,004</TT>
<BR><TT>.00001DD2: 8B4DCC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; ecx,[ebp][-0034]</TT>
<BR><TT>.00001DD5: 398820204200&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp&nbsp;&nbsp;&nbsp; [eax][000422020],ecx<FONT COLOR="#3333FF">; Is RetCode3=0x554C
?</FONT></TT>
<BR><TT>.00001DDB: 0F8523000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne&nbsp;&nbsp; .000001E04&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Bad_Guy_Jump</FONT>&nbsp;</TT>
<BR><TT>.00001DE1: A1AC204200&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; eax,[0004220AC]</TT>
<BR><TT>.00001DE6: C1E004&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
shl&nbsp;&nbsp;&nbsp; eax,004</TT>
<BR><TT>.00001DE9: 8B4DC8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; ecx,[ebp][-0038]</TT>
<BR><TT>.00001DEC: 398824204200&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp&nbsp;&nbsp;&nbsp; [eax][000422024],ecx<FONT COLOR="#3333FF">; Is RetCode4=0xE6EB
?</FONT></TT>
<BR><TT>.00001DF2: 0F850C000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne&nbsp;&nbsp; .000001E04&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Bad_Guy_Jump</FONT>&nbsp;</TT>
<BR><TT>.00001DF8: C745C401000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; d,[ebp][-003C],1&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
Good_Guy_Flag</FONT></TT>
<BR><TT>.00001DFF: E907000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jmp&nbsp;&nbsp; .000001E0B&nbsp;</TT>
<BR><TT>.00001E04: C745C400000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; d,[ebp][-003C],0&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
Bad_Guy_Flag</FONT></TT>
<BR><TT>.00001E0B: 837DC400&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp&nbsp;&nbsp;&nbsp; d,[ebp][-003C],0</TT>
<BR><TT>.00001E0F: 0F8515000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne&nbsp;&nbsp; .000001E2A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Dongle_OK</FONT></TT>
<BR><TT>.00001E15: 837DC002&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp&nbsp;&nbsp;&nbsp; d,[ebp][-0040],2&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
No_Dongle</FONT></TT>

<P><TT>This routine is <B>INCREDIBLY STUPID</B>!!</TT>
<BR><TT>As I said at the very beginning of this essay, the programmer just
forgot to read the Hasp documentation shipped with his dongle:</TT>
<BR><TT>Usually, you first check if there is a Hasp dongle connected to
the parallel port (Service #1) and then, if there is one, the type of Hasp
(Service #5).</TT>
<BR><TT>We can see here that the program check the type of Hasp before
verifying if there is a dongle connected.</TT>
<BR><TT>And so?</TT>
<BR><TT>The only problem is that we can see that ABBCS32 is expecting a
Hasp-3 dongle (RetCode2=0). But, after a call to Service #5, if you <U>don't
have any dongle connected</U> the RetCode2 will be equal to... 0x00 as
well!</TT>
<BR><TT>This just means that if you have the correct dongle or nothing
at all, the program will just assume that you have the right Hasp-3! Unbelievable...</TT>
<BR><TT>Fortunately, it checks Service #1 later.</TT>
<BR>&nbsp;

<P><TT>There are a lot of different ways to crack this crap (patching the
Bad_Guy_Flag...) but let's emulate the dongle by reverse engineering the
main Hasp routine again:</TT>
<BR><TT>&nbsp;</TT>
<BR><TT>Offsets changed are shown in <FONT COLOR="#CC0000">red</FONT> :</TT>

<P><TT>.00001AC9: 55&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp;
ebp&nbsp;</TT>
<BR><TT>.00001ACA: 8BEC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;
ebp,esp&nbsp;</TT>
<BR><TT>.00001ACC: 50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp;
eax&nbsp;</TT>
<BR><TT>.00001ACD: 53&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp;
ebx&nbsp;</TT>
<BR><TT>.00001ACE: 51&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp;
ecx&nbsp;</TT>
<BR><TT>.00001ACF: 52&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp;
edx&nbsp;</TT>
<BR><TT>.00001AD0: 57&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp;
edi&nbsp;</TT>
<BR><TT>.00001AD1: 56&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp;
esi&nbsp;</TT>
<BR><TT>.00001AD2: 8B751C&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;
esi,[ebp][0001C]&nbsp;</TT>
<BR><TT>.00001AD5: 8B3E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;
edi,[esi]&nbsp;</TT>
<BR><TT><FONT COLOR="#CC0000">.00001AD7:</FONT> B900000000 mov&nbsp;&nbsp;&nbsp;
ecx,000000000&nbsp;&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">; Clear ecx.</FONT></TT>
<BR><TT><FONT COLOR="#000000">.00001ADC: </FONT>8B5D08&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; ebx,[ebp][00008]&nbsp; <FONT COLOR="#3333FF">; bl=Service
called.</FONT></TT>
<BR><TT><FONT COLOR="#CC0000">.00001ADF:</FONT> 80FB02&nbsp;&nbsp;&nbsp;&nbsp;
cmp&nbsp;&nbsp;&nbsp; bl,002&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Is it Service #2?</FONT></TT>
<BR><TT><FONT COLOR="#CC0000">.00001AE2:</FONT> 7512&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne&nbsp;&nbsp; .000001AF6&nbsp;</TT>
<BR><TT><FONT COLOR="#CC0000">.00001AE4:</FONT> 66B8177A&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;
ax,07A17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
correct RetCode#1</FONT></TT>
<BR><TT><FONT COLOR="#CC0000">.00001AE8:</FONT> 66BB8A76&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;
bx,0768A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
correct RetCode#2</FONT></TT>
<BR><TT><FONT COLOR="#CC0000">.00001AEC:</FONT> 66B94C55&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;
cx,0554C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
correct RetCode#3</FONT>&nbsp;</TT>
<BR><TT><FONT COLOR="#CC0000">.00001AF0:</FONT> 66BAEBE6&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;
dx,0E6EB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
correct RetCode#4</FONT>&nbsp;&nbsp;</TT>
<BR><TT><FONT COLOR="#CC0000">.00001AF4:</FONT> EB0F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jmps&nbsp; .000001B05&nbsp;</TT>
<BR><TT><FONT COLOR="#CC0000">.00001AF6:</FONT> 80FB01&nbsp;&nbsp;&nbsp;&nbsp;
cmp&nbsp;&nbsp;&nbsp; bl,001&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Is it Service #1?</FONT></TT>
<BR><TT><FONT COLOR="#CC0000">.00001AF9:</FONT> 7506&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne&nbsp;&nbsp; .000001B01&nbsp;</TT>
<BR><TT><FONT COLOR="#CC0000">.00001AFB:</FONT> 66B80100&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;
ax,00001&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
correct RetCode#1</FONT>&nbsp;</TT>
<BR><TT><FONT COLOR="#CC0000">.00001AFF:</FONT> EB04&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jmps&nbsp; .000001B05&nbsp;</TT>
<BR><TT><FONT COLOR="#CC0000">.00001B01:</FONT> 33DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
xor&nbsp;&nbsp;&nbsp; ebx,ebx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Xor unused registers</FONT></TT>
<BR><TT><FONT COLOR="#CC0000">.00001B03:</FONT> 33C0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
xor&nbsp;&nbsp;&nbsp; eax,eax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; just in case.</FONT></TT>
<BR><TT>.00001B05: 8B7D1C&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;
edi,[ebp][0001C]&nbsp; <FONT COLOR="#3333FF">; Back to original code.</FONT></TT>
<BR><TT>.00001B08: 8907&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;
[edi],eax&nbsp;</TT>
<BR><TT>.00001B0A: 8B7D20&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;
edi,[ebp][00020]&nbsp;</TT>
<BR><TT>.00001B0D: 891F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;
[edi],ebx&nbsp;</TT>
<BR><TT>.00001B0F: 8B7D24&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;
edi,[ebp][00024]&nbsp;</TT>
<BR><TT>.00001B12: 890F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;
[edi],ecx&nbsp;</TT>
<BR><TT>.00001B14: 8B7D28&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;
edi,[ebp][00028]&nbsp;</TT>
<BR><TT>.00001B17: 8917&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;
[edi],edx&nbsp;</TT>
<BR><TT>.00001B19: 5E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pop&nbsp;&nbsp;&nbsp;
esi&nbsp;</TT>
<BR><TT>.00001B1A: 5F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pop&nbsp;&nbsp;&nbsp;
edi&nbsp;</TT>
<BR><TT>.00001B1B: 5A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pop&nbsp;&nbsp;&nbsp;
edx&nbsp;</TT>
<BR><TT>.00001B1C: 59&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pop&nbsp;&nbsp;&nbsp;
ecx&nbsp;</TT>
<BR><TT>.00001B1D: 5B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pop&nbsp;&nbsp;&nbsp;
ebx&nbsp;</TT>
<BR><TT>.00001B1E: 58&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pop&nbsp;&nbsp;&nbsp;
eax&nbsp;</TT>
<BR><TT>.00001B1F: 5D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pop&nbsp;&nbsp;&nbsp;
ebp&nbsp;</TT>
<BR><TT>.00001B20: C3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retn&nbsp;</TT>
<BR>&nbsp;
<BR><TT>Abbcs31 is cracked.</TT>
<BR>
<HR WIDTH="100%">
<BR><A NAME="WellCAD"></A><B><U><FONT SIZE=+2>WellCAD v2.30</FONT></U></B>
<BR><B>-Description:</B>
<BR>Data repository, geophysical and geological reporting tool.
<BR><B>-OS:</B>
<BR>Win95/NT
<BR><B>-Protection:</B>
<BR>Dongle (parallel key). Driver: Hasp95.vxd
<BR><B>-Misc.:</B>
<BR>Does NOT run if no dongle detected.
<BR>&nbsp;

<P><TT>Searching for the main Hasp routine, we easily find it at offset
:44D528 in the main program (wellcad.exe 1.42Mb). It has 2 X-refs and then,
the 14 X-refs (called several times) calling the Hasp services.</TT>
<BR><TT>Here are two of them:</TT>

<P><TT>:0049ECFE 6A01&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
push 00000001&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Service #1</FONT>&nbsp;</TT>
<BR><TT>:0049ED00 E87B080000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
call 0049F580&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Is_It_A_Hasp_Dongle ?</FONT></TT>
<BR><TT>:0049ED05 8B442408&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov eax, dword ptr [esp+08]&nbsp;</TT>
<BR><TT>:0049ED09 8D4C2410&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lea ecx, dword ptr [esp+10]&nbsp;</TT>
<BR><TT>:0049ED0D 48&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
dec eax&nbsp;</TT>
<BR><TT>:0049ED0E 8D54240C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lea edx, dword ptr [esp+0C]&nbsp;</TT>
<BR><TT>:0049ED12 83F801&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmp eax, 00000001&nbsp;</TT>
<BR><TT>:0049ED15 8D442414&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lea eax, dword ptr [esp+14]&nbsp;</TT>
<BR><TT>:0049ED19 1BFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sbb edi, edi&nbsp;</TT>
<BR><TT>:0049ED1B 50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
push eax&nbsp;</TT>
<BR><TT>:0049ED1C 8D44240C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lea eax, dword ptr [esp+0C]&nbsp;</TT>
<BR><TT>:0049ED20 51&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
push ecx&nbsp;</TT>
<BR><TT>:0049ED21 52&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
push edx&nbsp;</TT>
<BR><TT>:0049ED22 8BCE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov ecx, esi&nbsp;</TT>
<BR><TT>:0049ED24 F7DF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
neg edi&nbsp;</TT>
<BR><TT>:0049ED26 50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
push eax&nbsp;</TT>
<BR><TT>:0049ED27 6868200000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
push 00002068&nbsp;</TT>
<BR><TT>:0049ED2C 6A02&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
push 00000002&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Service # 2</FONT>&nbsp;</TT>
<BR><TT>:0049ED2E E84D080000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
call 0049F580&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Get_Hasp_Code&nbsp;</FONT>&nbsp;</TT>
<BR><TT>:0049ED33 817C2408A5F70000&nbsp; cmp dword ptr [esp+08], 0000F7A5<FONT COLOR="#3333FF">;Is
RetCode1 OK ?</FONT></TT>
<BR><TT>:0049ED3B 7529&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 0049ED66&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Bad_Guy jump</FONT></TT>
<BR><TT>:0049ED3D 817C240C8E420000&nbsp; cmp dword ptr [esp+0C], 0000428E<FONT COLOR="#3333FF">;Is
RetCode2 OK ?</FONT>&nbsp;</TT>
<BR><TT>:0049ED45 751F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 0049ED66&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Bad_Guy jump</FONT></TT>
<BR><TT>:0049ED47 817C2410E54F0000&nbsp; cmp dword ptr [esp+10], 00004FE5<FONT COLOR="#3333FF">;Is
RetCode3 OK ?</FONT>&nbsp;</TT>
<BR><TT>:0049ED4F 7515&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 0049ED66&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Bad_guy jump</FONT></TT>
<BR><TT>:0049ED51 817C24144E470000&nbsp; cmp dword ptr [esp+14], 0000474E<FONT COLOR="#3333FF">;Is
RetCode4 OK ?</FONT>&nbsp;</TT>
<BR><TT>:0049ED59 750B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jne 0049ED66&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Bad_Guy jump</FONT></TT>
<BR><TT>:0049ED5B 83E701&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
and edi, 00000001&nbsp;</TT>
<BR><TT>:0049ED5E 8BC7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov eax, edi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Set Good_Guy flag (eax=0x01)</FONT></TT>
<BR><TT>:0049ED60 5F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop edi&nbsp;</TT>
<BR><TT>:0049ED61 5E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop esi&nbsp;</TT>
<BR><TT>:0049ED62 83C410&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
add esp, 00000010&nbsp;</TT>
<BR><TT>:0049ED65 C3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ret&nbsp;</TT>

<P><TT>* Referenced by a (C)onditional:0049ED3B(C), :0049ED45(C), :0049ED4F(C),
:0049ED59(C)&nbsp;</TT>
<BR><TT>:0049ED66 33FF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
xor edi, edi&nbsp;</TT>
<BR><TT>:0049ED68 8BC7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov eax, edi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Bad_Guy (clear eax)</FONT></TT>
<BR><TT>:0049ED6A 5F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop edi&nbsp;</TT>
<BR><TT>:0049ED6B 5E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pop esi&nbsp;</TT>
<BR><TT>:0049ED6C 83C410&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
add esp, 00000010&nbsp;</TT>
<BR><TT>:0049ED6F C3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ret&nbsp;</TT>
<BR><TT>&nbsp;</TT>
<BR><TT>&nbsp;Let's crack it:</TT>
<BR><TT>:<FONT COLOR="#000000">0049ED66</FONT> 66B80100&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mov&nbsp;&nbsp;&nbsp; ax,00001</TT>

<P><TT>Now if you run the program, it will ask you for your name and company
name to type in. Then, it will take about 12 seconds on a P233 before WellCAD
main window appears on your screen. Let's solve this problem.</TT>
<BR><TT>As there a too many checks and comparisons occuring even before
the calls to the dongle, with SoftICE, BPX the main Hasp routine (:44D528)
and try to find some interesting cross references that we'll lead us to
the fatal(s) <I>jnz_Bad_Guy.</I></TT>
<BR><TT>Without any problem, we find several of them but only 2 seem very
interesting:</TT>
<BR>&nbsp;

<P><TT>:004C01E7 E8684A0200&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MFC40.MFC40:NoName0713</TT>
<BR><TT>:004C01EC 8D8BC8000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lea ecx, dword
ptr [ebx+000000C8]</TT>
<BR><TT>:004C01F2 E829E6FDFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
call 0049E820&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Verify_Dongle&nbsp; (+ Misc routines)</FONT></TT>
<BR><TT>:004C01F7 85C0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
test eax, eax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Is_Dongle_OK ?</FONT></TT>
<BR><TT>:004C01F9 0F8455FDFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; je 004BFF54&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Bad_Guy jump</FONT></TT>
<BR><TT>:004C01FF 68C8030000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
push 000003C8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Good_Guy go ahead</FONT></TT>
<BR><TT><FONT COLOR="#000000">...</FONT></TT>
<BR><TT><FONT COLOR="#000000">...</FONT></TT>
<BR><TT><FONT COLOR="#000000">:004C025F E8E4490200&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
MFC40.MFC40:NoName0711</FONT></TT>
<BR><TT><FONT COLOR="#000000">:004C0264 8D8BC8000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lea ecx, dword ptr [ebx+000000C8]</FONT></TT>
<BR><TT><FONT COLOR="#000000">:004C026A E881F0FDFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
call 0049F2F0</FONT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Verify_Dongle&nbsp; (+ Misc routines)</FONT></TT>
<BR><TT><FONT COLOR="#000000">:004C026F 85C0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
test eax, eax</FONT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Is_Dongle_OK ?</FONT></TT>
<BR><TT><FONT COLOR="#000000">:004C0271 0F84DDFCFFFF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
je 004BFF54</FONT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<FONT COLOR="#3333FF">; Bad_Guy jump</FONT></TT>
<BR><TT><FONT COLOR="#000000">:004C0277 8D4DC8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lea ecx, dword ptr [ebp-38]</FONT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <FONT COLOR="#3333FF">;
Good_Guy go ahead</FONT></TT>
<BR>&nbsp;

<P><TT>Just get rid of the two <I>Verify_Dongle</I> calls and replace them
with <I>mov eax,1</I>.&nbsp;</TT>

<P><TT>This will considerabely speed up the program (just 1 little second
to start) and the crack is done.&nbsp;</TT>
<BR><TT>OK, it seems very easy to crack but it takes longer that you may
think. The protection is not too bad: a lot of calls to sub-routines that
will call other sub-routines etc.. and then comparisons in one of them
with the conditional jump in another one... It may fool or confuse you
during a Live approach, but could not resist a good Dead listing.</TT>
<BR>
<hr width="100%">
<center>
End of first part<br>
<a href="fp_dong2.htm" tppabs="http://www.woodmann.com/fp_dong2.htm">I want the second part</a>
</center>

